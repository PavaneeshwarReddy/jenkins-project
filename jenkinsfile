

pipeline {
    agent any

    environment {
        SLACK_CHANNEL = "#jenkins"
        STAGE_ERROR_MESSAGE = ""
        IMAGE_NAME = "myapp-jenkins"
        VERSION = "0.0"
        IMAGE = "${IMAGE_NAME}:${VERSION}"
        TEST_REPORTS_PATH = "**/reports/junit/*.xml"
        DOCKER_REGISTRY = 'index.docker.io/v1/'
        DOCKER_CREDENTIALS_ID = credentials("docker-credentials")
    }

    stages {
        stage("Checkout to Git Repository") {
            steps {
                script {
                    sendSlackMessage("${BUILD_ID}: Build Started ${BUILD_NUMBER}", 'SUCCESS')
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                        userRemoteConfigs: [[url: 'https://github.com/PavaneeshwarReddy/jenkins-project.git']]
                    ])
                }
            }
        }
        stage("Build") {
            agent {
                docker {
                    image 'node:22-alpine3.19'
                    reuseNode true
                    args '-u root'
                }
            }
            steps {
                script {
                    sendSlackMessage("Build stage started for ${BUILD_NUMBER}",'SUCCESS')
                    echo 'npm --version'
                    try {
                        sh 'npm install'
                        dir('./dockerchecks') {
                            sh 'node nodetest.js'
                        }
                    } catch(Exception e) {
                        currentBuild.result = 'FAILURE'
                        env.STAGE_ERROR_MESSAGE = "Build stage failed: ${e.message}"
                        sh 'exit 1'
                    }
                    echo 'Build Stage successful'
                    sendSlackMessage("Build stage successful, proceeding to next stage", 'SUCCESS')
                }
            }
        }
        stage("Test") {
            steps {
                echo "Test stage started for ${BUILD_NUMBER}"
                script {
                    sendSlackMessage("Test stage started for ${BUILD_NUMBER}",'SUCCESS')
                    try {
                        sendSlackMessage("Test stage started for ${BUILD_NUMBER}",'SUCCESS')
                        sh 'npm test'
                        sh 'pwd'
                        sh "ls ${TEST_REPORTS_PATH}"
                        junit "${TEST_REPORTS_PATH}"
                    }
                    catch(Exception e) {
                        currentBuild.result = 'FAILURE'
                        env.STAGE_ERROR_MESSAGE = "Test stage build failed ${e.message}"
                        sh 'exit 1'
                    }
                    echo "Test stage successfull"
                    sendSlackMessage("Test stage successfull, proceeding to next stage", 'SUCCESS')
                }
            }
        }
        stage("Package") {
            agent {
                docker {
                    image 'docker:27.0.1-cli'
                    reuseNode true
                }
            }
            steps {
                echo "This is Package stage"
                echo "docker --version"
                script {
                    sendSlackMessage("Package stage started for ${BUILD_NUMBER}",'SUCCESS')
                    try {
                        docker.withRegistry(env.DOCKER_REGISTRY, env.DOCKER_CREDENTIALS_ID) {
                            def image = docker.build(env.IMAGE)
                            image.inside {
                                sh "node ./dockerchecks/nodetest.js"
                            }
                            image.push()
                        }
                    }
                    catch(Exception e) {
                        currentBuild.result = 'FAILURE'
                        env.STAGE_ERROR_MESSAGE = "Test stage build failed ${e.message}"
                        sh 'exit 1'
                    }
                    sendSlackMessage("Test stage successfull, proceeding to next stage", 'SUCCESS')
                }
            }
        }
        stage("Deploy") {
            steps {
                echo "This is a Deploy stage"
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
            sendSlackMessage(env.STAGE_ERROR_MESSAGE ?: "Pipeline failed without specific error message",'FAILURE')
        }
        always {
            echo 'Pipeline completed.'
            sendSlackMessage("Pipeline completed",currentBuild.result)
            //cleanWs() // this cleans entire workspace
        }
    }
}

// Function to return the color code
String colorCode(String type) {
    def COLOR_MAPPING = [
        SUCCESS: '#00FF00',
        FAILURE: '#FF0000',
        ABORTED: '#FFFF00',
        UNSTABLE: '#FFA500'
    ]
    return COLOR_MAPPING[type]
}

// Function to send Slack message
void sendSlackMessage(String message, String type) {
    slackSend(
        color: colorCode(type),
        message: message,
        channel: env.SLACK_CHANNEL,
    )
}
